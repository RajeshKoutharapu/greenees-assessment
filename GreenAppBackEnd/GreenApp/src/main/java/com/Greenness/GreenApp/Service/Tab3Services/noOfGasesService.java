package com.Greenness.GreenApp.Service.Tab3Services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.Greenness.GreenApp.Service.Tab1Service;
import com.Greenness.GreenApp.Service.Tab2Services.mainInstrumentsService;
import com.Greenness.GreenApp.Service.Tab2Services.tab2Service;


@Component
public class noOfGasesService {
	
	@Autowired
	mainInstrumentsService maininstrumentservice;
	@Autowired
	Tab1Service tab1service;
	@Autowired
	tab2Service tab2service;

	Map<String,Integer> nfpahealtflemabilityhmap=new HashMap<>();
	Map<String,Integer> signalwordmap=new HashMap<>();
	Map<String,Integer> physicalhazardhmap=new HashMap<>();
	
	
	//created list for storing the step1 values for getting nfpahealth value for no.of gases
	List<Double> volumeofgaslist=new ArrayList<>();
	List<Double> gasedusedlist=new ArrayList<>();
	List<Double> nfpahealthvaluelist=new ArrayList<>();
	//total waste generated by the whole process which is used in the caliculation of step2
	Double totalwaste=0D;
	
	Double gasesnfpahealthvalueAverage=0D;
	public noOfGasesService() {
		// TODO Auto-generated constructor stub
		nfpahealtflemabilityhmap.put("0",100);
		nfpahealtflemabilityhmap.put("1",75);
		nfpahealtflemabilityhmap.put("2",50);
		nfpahealtflemabilityhmap.put("3",25);
		nfpahealtflemabilityhmap.put("4",0);
		signalwordmap.put("Danger",0);
		signalwordmap.put("warning",33);
		signalwordmap.put("Caution",66);
		signalwordmap.put("not mentioned",100);
	   physicalhazardhmap.put("SA",0);     
	   physicalhazardhmap.put("OX",33);
	   physicalhazardhmap.put("W",66);
	   physicalhazardhmap.put("N/A",100);
	}
	
	public Integer getGasesNfpahealthAndFlemmabilityAverage(List<List<String>> nfpahealthvalue,Integer noofanayticsstyied) {
		//we are using clear method for crearing previous request data for avoiding error called adding data angain instead of replacing with new requesting data
       totalwaste=0D;
       gasesnfpahealthvalueAverage=0D;
       nfpahealthvalue.clear();
       volumeofgaslist.clear();
       gasedusedlist.clear();
       
		
	Double timeandinjectionsproduct=maininstrumentservice.getProductOfTimeAndInjections();
	        //method call for adding volume of gas to list
	       volumeofgaslist=step1(nfpahealthvalue, timeandinjectionsproduct);
						       for (Double list :volumeofgaslist) {
							System.out.println(list);
						}
	       //method call for getting total waste
	       totalwaste=getTotalWaste(volumeofgaslist ,noofanayticsstyied);
	                // System.out.println(totalwaste);
	       //method call to find percentage of gases used (step2)
	       gasedusedlist=step2(volumeofgaslist,totalwaste);
					//	       for (Double list : gasedusedlist) {
					//				System.out.println(list);
					//			}
	   	//this  method  call used to get nfpahealthvalue based on the dropdown selected and formula
           nfpahealthvaluelist=getnfpaHealthValue(gasedusedlist, nfpahealthvalue);
					//           for (Double list :  nfpahealthvaluelist) {
					//				System.out.println(list);
					//			}
					//	       
	       //this below code is used to  get the final average of the nfpahealthvalue  based on the above result 
           
           Double tempsum=0D;
            for (Double list :  nfpahealthvaluelist) {
				tempsum+=list;
			}
	         gasesnfpahealthvalueAverage=tempsum/nfpahealthvalue.size();
		
		return   (int) Math.round(gasesnfpahealthvalueAverage);
	}
	//Method for gases physicalhazard average finding
	public Double getGasesPhysicalHazardAverage(List<List<String>> physicalhazardvalue) {
		 Integer phsum=0;
		Integer swsum=0;
		Double phaverage=0D,swaverage=0D;
		for(int i=0;i<physicalhazardvalue.size();i++) {
			 phsum+=physicalhazardhmap.get(physicalhazardvalue.get(i).get(1));
			 swsum+=signalwordmap.get(physicalhazardvalue.get(i).get(2));
        }
		if(0<physicalhazardvalue.size()) {
		 phaverage=(double) (phsum/physicalhazardvalue.size());
		 swaverage=(double) (swsum/physicalhazardvalue.size());
		
		}
		return (phaverage+swaverage)/2;

	}
	
	public List<Double> step1(List<List<String>> nfpahealthvalue,Double timeandinjectionsproduct){
		List<Double> temp=new ArrayList<>();
		
		for(int i=0;i<nfpahealthvalue.size();i++) {

            //adding total volume of gas to the list one by one for caliculation of step2
		  temp.add(timeandinjectionsproduct*Double.parseDouble(nfpahealthvalue.get(i).get(2)));  
		}
		return temp;
	}
	
	public Double getTotalWaste(List<Double> totalvoluemgaselist,Integer noofannalytic) {
		
		//getting waste from tab1 and tab2
		Double tab1waste=tab1service.getWasteVolume();
		Double tab2waste=tab2service.getEfluentWaste();
		//adding both to final waste
		Double finalwaste=tab1waste+tab2waste;
		for (Double temp : totalvoluemgaselist) {
			//adding gasvolume to final waste
			finalwaste+=temp;
		}
		
		
		return finalwaste/noofannalytic;
		
	}
	public List<Double> step2(List<Double> gasvolumelist,Double totalwaste){
		List<Double> temp=new ArrayList<>();
		
		for (Double gaslist : gasvolumelist) {
			temp.add((gaslist*100)/totalwaste);
		}
		
		return temp;
	}
	
	//method used to claiculate nfpahealthvalue based on the dropdown selected and formula
	public List<Double> getnfpaHealthValue(List<Double> gasused,List<List<String>> nfpahealthvalue){
		List<Double> temp=new ArrayList<>();
          
		int  index=0;
		for(int i=0;i<nfpahealthvalue.size();i++) {
			temp.add((gasused.get(index)*nfpahealtflemabilityhmap.get(nfpahealthvalue.get(i).get(1)))/100);
			index++;
		}
		
		return temp;
	}
	
}
